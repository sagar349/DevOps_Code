pipeline {
    agent any
    
    environment {
        REGISTRY = "your-docker-registry"
        IMAGE_NAME = "your-image-name"
        VERSION = "latest"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Unit Test') {
            steps {
                script {
                    // Run unit tests (example for a Node.js project)
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
        
        stage('Static Code Analysis') {
            steps {
                script {
                    // Run static code analysis (example for SonarQube)
                    sh 'sonar-scanner'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${VERSION} ."
                }
            }
        }
        stage('Trivy Scan') {
    steps {
        // Pull Trivy image and run scan on the built image
        sh '''
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL your-image:tag
        '''
    }
}
        stage('Push') {
            steps {
                script {
                    // Push Docker image to registry
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:${VERSION}"
                }
            }
        }

        stage('Update Manifest') {
            steps {
                script {
                    // Update Kubernetes manifest with new image version
                    sh "sed -i 's|${IMAGE_NAME}:.*|${REGISTRY}/${IMAGE_NAME}:${VERSION}|g' k8s/deployment.yaml"
                }
            }
        }

        stage('Deploy to Kubernetes with ArgoCD') {
            steps {
                script {
                    // Trigger ArgoCD to sync the application
                    sh "argocd app sync your-argocd-app-name"
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline executed successfully'
        }
        failure {
            echo 'Pipeline execution failed'
        }
    }
}


# multi agent for Jenkins
pipeline {
  agent none

  stages {
    stage('Build') {
      agent { label 'build-agent' }
      steps {
        echo 'Building the application...'
        // Your build commands here
      }
    }

    stage('Push') {
      agent { label 'push-agent' }
      steps {
        echo 'Pushing the Docker image...'
        // Your push commands here
      }
    }
  }
}


#Java (using Maven):
#Build project: mvn clean install
#Run application: java -jar target/your-app.jar

#Python:
#Install dependencies: pip install -r requirements.txt
#Run application/script: python script.py (or python3 script.py)

