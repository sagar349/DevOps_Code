stages:
  - checkout
  - unit_test
  - static_code_analysis
  - build
  - trivy_scan
  - push
  - update_manifest
  - deploy

variables:
  REGISTRY: "your-docker-registry"
  IMAGE_NAME: "your-image-name"
  VERSION: "latest"

before_script:
  - export PATH=$PATH:/usr/local/bin

checkout:
  stage: checkout
  script:
    - git clone https://your-repository-url.git

unit_test:
  stage: unit_test
  script:
    - npm install
    - npm test

static_code_analysis:
  stage: static_code_analysis
  script:
    - sonar-scanner

build:
  stage: build
  tags:
  - runner-docker
  script:
    - docker build -t $REGISTRY/$IMAGE_NAME:$VERSION .

trivy_scan:
  stage: security_scan
  tags:
  - runner-security
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]

  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL your-image:tag


push:
  stage: push
  tags:
  - runner-security
  script:
    - docker push $REGISTRY/$IMAGE_NAME:$VERSION

update_manifest:
  stage: update_manifest
  script:
    - sed -i "s|$IMAGE_NAME:.*|$REGISTRY/$IMAGE_NAME:$VERSION|g" k8s/deployment.yaml

deploy:
  stage: deploy
  script:
    - argocd app sync your-argocd-app-name
  only:
    - master

deploy:
  stage: deploy
  image: alpine/helm:3.7.1
  script:
    - helm repo add my-repo https://charts.example.com
    - helm repo update
    - helm upgrade --install my-app my-repo/my-chart --namespace my-namespace --values values.yaml
  only:
    - main